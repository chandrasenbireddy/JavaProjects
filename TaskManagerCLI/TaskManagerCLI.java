package JavaProjects.TaskManagerCLI;

import java.util.Scanner;

public class TaskManagerCLI {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskManager taskManager = new TaskManager();
        boolean running = true;
        while(running) {
            System.out.println("Task Manager Menu:");
            System.out.println("1. Add Task");
            System.out.println("2. Remove Task");
            System.out.println("3. Edit Task");
            System.out.println("4. View All Tasks");
            System.out.println("5. View Task by ID");
            System.out.println("6. Sort Tasks by Title");
            System.out.println("7. Sort Tasks by Priority");
            System.out.println("8. Filter Tasks by priority");
            System.out.println("9. Filter Tasks by Status");
            System.out.println("10. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); //Consume nextLine generated by nextInt
            switch (choice) {
                case 1:
                    System.out.println("Enter Task ID (integer): ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); //Consume nextLine generated by nextInt
                    System.out.println("Enter Task Title: ");
                    String title = scanner.nextLine();
                    System.out.println("Enter Task Description: ");
                    String description = scanner.nextLine();
                    boolean validStatus = false;
                    Status status = null;
                    while (!validStatus) {
                        try {
                            System.out.println("Enter Task Status (PENDING, IN_PROGRESS, COMPLETED, CANCELLED): ");
                            status = Status.valueOf(scanner.nextLine().trim().toUpperCase());
                            validStatus = true;
                        }
                        catch (Exception e) {
                            System.out.println("Invalid status. Please try again.");
                        }
                    }
                    boolean validPriority = false;
                    Priority priority = null;
                    while (!validPriority) {
                        try{
                            System.out.println("Enter Task Priority (LOW, MEDIUM, HIGH, URGENT): ");
                            priority = Priority.valueOf(scanner.nextLine().trim().toUpperCase());
                            validPriority = true;
                        }
                        catch (Exception e) {
                            System.out.println("Invalid priority. Please try again.");
                        }
                    }
                    System.out.println("Enter Task Due Date (YYYY-MM-DD): ");
                    String dueDate = scanner.nextLine();
                    System.out.println("Enter Task Creation Date (YYYY-MM-DD): ");
                    String creationDate = scanner.nextLine();
                    System.out.println("Enter Task Completion Date (YYYY-MM-DD) or leave blank if not completed: ");
                    String completionDate = scanner.nextLine();
                    if (completionDate.isBlank()) {
                        completionDate = null;
                    }
                    Task newTask = new Task(id, title, description, status, priority, dueDate, creationDate, completionDate);
                    taskManager.addTask(newTask);
                    System.out.println("Task added successfully.");
                    break;
                case 2:
                    System.out.println("Enter Task ID to remove: ");
                    int removeId = scanner.nextInt();
                    scanner.nextLine(); //Consume nextLine generated by nextInt
                    taskManager.removeTask(removeId);
                    System.out.println("Task removed successfully.");
                    break;
                case 3:
                    System.out.println("Enter Task ID to edit: ");
                    int editId = scanner.nextInt();
                    scanner.nextLine(); //Consume nextLine generated by nextInt
                    Task taskToEdit = taskManager.getTaskById(editId);
                    if (taskToEdit != null) {
                        System.out.println("Enter new Title (leave blank to keep current): ");
                        String newTitle = scanner.nextLine();
                        System.out.println("Enter new Description (leave blank to keep current): ");
                        String newDescription = scanner.nextLine();
                        System.out.println("Enter new Status (PENDING, IN_PROGRESS, COMPLETED, CANCELLED) or leave blank to keep current: ");
                        String statusInput = scanner.nextLine();
                        Status newStatus = null;
                        boolean validNewStatus = false;
                        if (!statusInput.isBlank()) {
                            while (!validNewStatus) {
                                try {
                                    newStatus = Status.valueOf(statusInput.trim().toUpperCase());
                                    validNewStatus = true;
                                } catch (Exception e) {
                                    System.out.println("Invalid status. Please try again.");
                                    statusInput = scanner.nextLine();
                                }
                            }
                        }
                        System.out.println("Enter new Priority (LOW, MEDIUM, HIGH, URGENT) or leave blank to keep current: ");
                        String priorityInput = scanner.nextLine();
                        Priority newPriority = null;
                        boolean validNewPriority = false;
                        if (!priorityInput.isBlank()) {
                            while (!validNewPriority) {
                                try {
                                    newPriority = Priority.valueOf(priorityInput.trim().toUpperCase());
                                    validNewPriority = true;
                                } catch (Exception e) {
                                    System.out.println("Invalid priority. Please try again.");
                                    priorityInput = scanner.nextLine();
                                }
                            }
                        }
                        System.out.println("Enter new Due Date (YYYY-MM-DD) or leave blank to keep current: ");
                        String newDueDate = scanner.nextLine();
                        System.out.println("Enter new Creation Date (YYYY-MM-DD) or leave blank to keep current: ");
                        String newCreationDate = scanner.nextLine();
                        System.out.println("Enter new Completion Date (YYYY-MM-DD) or leave blank to keep current: ");
                        String newCompletionDate = scanner.nextLine();
                        if (newCompletionDate.isBlank()) {
                            newCompletionDate = null;
                        }
                        taskManager.editTasks(editId, newTitle, newDescription, newStatus, newPriority, newDueDate, newCreationDate, newCompletionDate);
                        System.out.println("Task edited successfully.");
                    } else {
                        System.out.println("Task with ID " + editId + " not found.");
                    }
                    break;
                case 4:
                    taskManager.viewAllTasks();
                    break;
                case 5:
                    System.out.println("Enter Task ID to view: ");
                    int viewId = scanner.nextInt();
                    scanner.nextLine(); //Consume nextLine generated by nextInt
                    Task taskToView = taskManager.getTaskById(viewId);
                    if (taskToView != null) {
                        System.out.println(taskToView.toString());
                    } else {
                        System.out.println("Task with ID " + viewId + " not found.");
                    }
                    break;
                case 6:
                    System.out.println("Sorting tasks by title...");
                    SortByPriority sortByTitle = new SortByPriority();
                    sortByTitle.sort(taskManager.orderedTasks);
                    System.out.println("Tasks sorted by title.");
                    taskManager.viewAllTasks();
                    break;
                case 7:
                    System.out.println("Sorting tasks by priority...");
                    SortByPriority sortByPriority = new SortByPriority();
                    sortByPriority.sort(taskManager.orderedTasks);
                    System.out.println("Tasks sorted by priority.");
                    taskManager.viewAllTasks();
                    break;
                case 8:
                    System.out.println("Enter Priority to filter by (LOW, MEDIUM, HIGH, URGENT): ");
                    String filterPriorityInput = scanner.nextLine();
                    Priority filterPriority = null;
                    boolean validFilterPriority = false;
                    while (!validFilterPriority) {
                        try {
                            filterPriority = Priority.valueOf(filterPriorityInput.trim().toUpperCase());
                            validFilterPriority = true;
                        } catch (Exception e) {
                            System.out.println("Invalid priority. Please try again.");
                            filterPriorityInput = scanner.nextLine();
                        }
                    }
                    FilterByPriority filterByPriority = new FilterByPriority(filterPriority);
                    System.out.println("Filtered Tasks by priority " + filterPriority + ":");
                    for (Task task : taskManager.orderedTasks) {
                        if (filterByPriority.filter(task)) {
                            System.out.println(task);
                        }
                    }
                    break;
                case 9:
                    System.out.println("Enter Status to filter by (PENDING, IN_PROGRESS, COMPLETED, CANCELLED): ");
                    String filterStatusInput = scanner.nextLine();
                    Status filterStatus = null;
                    boolean validFilterStatus = false;
                    while (!validFilterStatus) {
                        try {
                            filterStatus = Status.valueOf(filterStatusInput.trim().toUpperCase());
                            validFilterStatus = true;
                        }
                        catch (Exception e) {
                            System.out.println("Invalid status. Please try again.");
                            filterStatusInput = scanner.nextLine();
                        }
                    }
                    FilterByStatus filterByStatus = new FilterByStatus(filterStatus);
                    System.out.println("Filtered Tasks by status " + filterStatus + ":");
                    for (Task task : taskManager.orderedTasks) {
                        if (filterByStatus.filter(task)) {
                            System.out.println(task);
                        }
                    }
                    break;
                case 10:
                    running = false;
                    System.out.println("Exiting Task Manager. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
                }
        }
    }

}
